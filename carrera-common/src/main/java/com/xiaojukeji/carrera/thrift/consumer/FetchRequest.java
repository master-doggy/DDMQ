/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xiaojukeji.carrera.thrift.consumer;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-10-31")
public class FetchRequest implements org.apache.thrift.TBase<FetchRequest, FetchRequest._Fields>, java.io.Serializable, Cloneable, Comparable<FetchRequest> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FetchRequest");

  private static final org.apache.thrift.protocol.TField CONSUMER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("consumerId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField GROUP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("groupId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField CLUSTER_FIELD_DESC = new org.apache.thrift.protocol.TField("cluster", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField FETCH_OFFSET_FIELD_DESC = new org.apache.thrift.protocol.TField("fetchOffset", org.apache.thrift.protocol.TType.MAP, (short)4);
  private static final org.apache.thrift.protocol.TField MAX_BATCH_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("maxBatchSize", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField MAX_LINGER_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("maxLingerTime", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("version", org.apache.thrift.protocol.TType.STRING, (short)60);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new FetchRequestStandardSchemeFactory());
    schemes.put(TupleScheme.class, new FetchRequestTupleSchemeFactory());
  }

  public String consumerId; // required
  public String groupId; // required
  public String cluster; // required
  public Map<String,Map<String,Long>> fetchOffset; // optional
  public int maxBatchSize; // optional
  public int maxLingerTime; // optional
  public String version; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CONSUMER_ID((short)1, "consumerId"),
    GROUP_ID((short)2, "groupId"),
    CLUSTER((short)3, "cluster"),
    FETCH_OFFSET((short)4, "fetchOffset"),
    MAX_BATCH_SIZE((short)10, "maxBatchSize"),
    MAX_LINGER_TIME((short)11, "maxLingerTime"),
    VERSION((short)60, "version");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CONSUMER_ID
          return CONSUMER_ID;
        case 2: // GROUP_ID
          return GROUP_ID;
        case 3: // CLUSTER
          return CLUSTER;
        case 4: // FETCH_OFFSET
          return FETCH_OFFSET;
        case 10: // MAX_BATCH_SIZE
          return MAX_BATCH_SIZE;
        case 11: // MAX_LINGER_TIME
          return MAX_LINGER_TIME;
        case 60: // VERSION
          return VERSION;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MAXBATCHSIZE_ISSET_ID = 0;
  private static final int __MAXLINGERTIME_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.FETCH_OFFSET,_Fields.MAX_BATCH_SIZE,_Fields.MAX_LINGER_TIME,_Fields.VERSION};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CONSUMER_ID, new org.apache.thrift.meta_data.FieldMetaData("consumerId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GROUP_ID, new org.apache.thrift.meta_data.FieldMetaData("groupId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CLUSTER, new org.apache.thrift.meta_data.FieldMetaData("cluster", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FETCH_OFFSET, new org.apache.thrift.meta_data.FieldMetaData("fetchOffset", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)))));
    tmpMap.put(_Fields.MAX_BATCH_SIZE, new org.apache.thrift.meta_data.FieldMetaData("maxBatchSize", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MAX_LINGER_TIME, new org.apache.thrift.meta_data.FieldMetaData("maxLingerTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.VERSION, new org.apache.thrift.meta_data.FieldMetaData("version", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FetchRequest.class, metaDataMap);
  }

  public FetchRequest() {
  }

  public FetchRequest(
    String consumerId,
    String groupId,
    String cluster)
  {
    this();
    this.consumerId = consumerId;
    this.groupId = groupId;
    this.cluster = cluster;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public FetchRequest(FetchRequest other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetConsumerId()) {
      this.consumerId = other.consumerId;
    }
    if (other.isSetGroupId()) {
      this.groupId = other.groupId;
    }
    if (other.isSetCluster()) {
      this.cluster = other.cluster;
    }
    if (other.isSetFetchOffset()) {
      Map<String,Map<String,Long>> __this__fetchOffset = new HashMap<String,Map<String,Long>>(other.fetchOffset.size());
      for (Map.Entry<String, Map<String,Long>> other_element : other.fetchOffset.entrySet()) {

        String other_element_key = other_element.getKey();
        Map<String,Long> other_element_value = other_element.getValue();

        String __this__fetchOffset_copy_key = other_element_key;

        Map<String,Long> __this__fetchOffset_copy_value = new HashMap<String,Long>(other_element_value);

        __this__fetchOffset.put(__this__fetchOffset_copy_key, __this__fetchOffset_copy_value);
      }
      this.fetchOffset = __this__fetchOffset;
    }
    this.maxBatchSize = other.maxBatchSize;
    this.maxLingerTime = other.maxLingerTime;
    if (other.isSetVersion()) {
      this.version = other.version;
    }
  }

  public FetchRequest deepCopy() {
    return new FetchRequest(this);
  }

  @Override
  public void clear() {
    this.consumerId = null;
    this.groupId = null;
    this.cluster = null;
    this.fetchOffset = null;
    setMaxBatchSizeIsSet(false);
    this.maxBatchSize = 0;
    setMaxLingerTimeIsSet(false);
    this.maxLingerTime = 0;
    this.version = null;
  }

  public String getConsumerId() {
    return this.consumerId;
  }

  public FetchRequest setConsumerId(String consumerId) {
    this.consumerId = consumerId;
    return this;
  }

  public void unsetConsumerId() {
    this.consumerId = null;
  }

  /** Returns true if field consumerId is set (has been assigned a value) and false otherwise */
  public boolean isSetConsumerId() {
    return this.consumerId != null;
  }

  public void setConsumerIdIsSet(boolean value) {
    if (!value) {
      this.consumerId = null;
    }
  }

  public String getGroupId() {
    return this.groupId;
  }

  public FetchRequest setGroupId(String groupId) {
    this.groupId = groupId;
    return this;
  }

  public void unsetGroupId() {
    this.groupId = null;
  }

  /** Returns true if field groupId is set (has been assigned a value) and false otherwise */
  public boolean isSetGroupId() {
    return this.groupId != null;
  }

  public void setGroupIdIsSet(boolean value) {
    if (!value) {
      this.groupId = null;
    }
  }

  public String getCluster() {
    return this.cluster;
  }

  public FetchRequest setCluster(String cluster) {
    this.cluster = cluster;
    return this;
  }

  public void unsetCluster() {
    this.cluster = null;
  }

  /** Returns true if field cluster is set (has been assigned a value) and false otherwise */
  public boolean isSetCluster() {
    return this.cluster != null;
  }

  public void setClusterIsSet(boolean value) {
    if (!value) {
      this.cluster = null;
    }
  }

  public int getFetchOffsetSize() {
    return (this.fetchOffset == null) ? 0 : this.fetchOffset.size();
  }

  public void putToFetchOffset(String key, Map<String,Long> val) {
    if (this.fetchOffset == null) {
      this.fetchOffset = new HashMap<String,Map<String,Long>>();
    }
    this.fetchOffset.put(key, val);
  }

  public Map<String,Map<String,Long>> getFetchOffset() {
    return this.fetchOffset;
  }

  public FetchRequest setFetchOffset(Map<String,Map<String,Long>> fetchOffset) {
    this.fetchOffset = fetchOffset;
    return this;
  }

  public void unsetFetchOffset() {
    this.fetchOffset = null;
  }

  /** Returns true if field fetchOffset is set (has been assigned a value) and false otherwise */
  public boolean isSetFetchOffset() {
    return this.fetchOffset != null;
  }

  public void setFetchOffsetIsSet(boolean value) {
    if (!value) {
      this.fetchOffset = null;
    }
  }

  public int getMaxBatchSize() {
    return this.maxBatchSize;
  }

  public FetchRequest setMaxBatchSize(int maxBatchSize) {
    this.maxBatchSize = maxBatchSize;
    setMaxBatchSizeIsSet(true);
    return this;
  }

  public void unsetMaxBatchSize() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAXBATCHSIZE_ISSET_ID);
  }

  /** Returns true if field maxBatchSize is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxBatchSize() {
    return EncodingUtils.testBit(__isset_bitfield, __MAXBATCHSIZE_ISSET_ID);
  }

  public void setMaxBatchSizeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAXBATCHSIZE_ISSET_ID, value);
  }

  public int getMaxLingerTime() {
    return this.maxLingerTime;
  }

  public FetchRequest setMaxLingerTime(int maxLingerTime) {
    this.maxLingerTime = maxLingerTime;
    setMaxLingerTimeIsSet(true);
    return this;
  }

  public void unsetMaxLingerTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAXLINGERTIME_ISSET_ID);
  }

  /** Returns true if field maxLingerTime is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxLingerTime() {
    return EncodingUtils.testBit(__isset_bitfield, __MAXLINGERTIME_ISSET_ID);
  }

  public void setMaxLingerTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAXLINGERTIME_ISSET_ID, value);
  }

  public String getVersion() {
    return this.version;
  }

  public FetchRequest setVersion(String version) {
    this.version = version;
    return this;
  }

  public void unsetVersion() {
    this.version = null;
  }

  /** Returns true if field version is set (has been assigned a value) and false otherwise */
  public boolean isSetVersion() {
    return this.version != null;
  }

  public void setVersionIsSet(boolean value) {
    if (!value) {
      this.version = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CONSUMER_ID:
      if (value == null) {
        unsetConsumerId();
      } else {
        setConsumerId((String)value);
      }
      break;

    case GROUP_ID:
      if (value == null) {
        unsetGroupId();
      } else {
        setGroupId((String)value);
      }
      break;

    case CLUSTER:
      if (value == null) {
        unsetCluster();
      } else {
        setCluster((String)value);
      }
      break;

    case FETCH_OFFSET:
      if (value == null) {
        unsetFetchOffset();
      } else {
        setFetchOffset((Map<String,Map<String,Long>>)value);
      }
      break;

    case MAX_BATCH_SIZE:
      if (value == null) {
        unsetMaxBatchSize();
      } else {
        setMaxBatchSize((Integer)value);
      }
      break;

    case MAX_LINGER_TIME:
      if (value == null) {
        unsetMaxLingerTime();
      } else {
        setMaxLingerTime((Integer)value);
      }
      break;

    case VERSION:
      if (value == null) {
        unsetVersion();
      } else {
        setVersion((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CONSUMER_ID:
      return getConsumerId();

    case GROUP_ID:
      return getGroupId();

    case CLUSTER:
      return getCluster();

    case FETCH_OFFSET:
      return getFetchOffset();

    case MAX_BATCH_SIZE:
      return Integer.valueOf(getMaxBatchSize());

    case MAX_LINGER_TIME:
      return Integer.valueOf(getMaxLingerTime());

    case VERSION:
      return getVersion();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CONSUMER_ID:
      return isSetConsumerId();
    case GROUP_ID:
      return isSetGroupId();
    case CLUSTER:
      return isSetCluster();
    case FETCH_OFFSET:
      return isSetFetchOffset();
    case MAX_BATCH_SIZE:
      return isSetMaxBatchSize();
    case MAX_LINGER_TIME:
      return isSetMaxLingerTime();
    case VERSION:
      return isSetVersion();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof FetchRequest)
      return this.equals((FetchRequest)that);
    return false;
  }

  public boolean equals(FetchRequest that) {
    if (that == null)
      return false;

    boolean this_present_consumerId = true && this.isSetConsumerId();
    boolean that_present_consumerId = true && that.isSetConsumerId();
    if (this_present_consumerId || that_present_consumerId) {
      if (!(this_present_consumerId && that_present_consumerId))
        return false;
      if (!this.consumerId.equals(that.consumerId))
        return false;
    }

    boolean this_present_groupId = true && this.isSetGroupId();
    boolean that_present_groupId = true && that.isSetGroupId();
    if (this_present_groupId || that_present_groupId) {
      if (!(this_present_groupId && that_present_groupId))
        return false;
      if (!this.groupId.equals(that.groupId))
        return false;
    }

    boolean this_present_cluster = true && this.isSetCluster();
    boolean that_present_cluster = true && that.isSetCluster();
    if (this_present_cluster || that_present_cluster) {
      if (!(this_present_cluster && that_present_cluster))
        return false;
      if (!this.cluster.equals(that.cluster))
        return false;
    }

    boolean this_present_fetchOffset = true && this.isSetFetchOffset();
    boolean that_present_fetchOffset = true && that.isSetFetchOffset();
    if (this_present_fetchOffset || that_present_fetchOffset) {
      if (!(this_present_fetchOffset && that_present_fetchOffset))
        return false;
      if (!this.fetchOffset.equals(that.fetchOffset))
        return false;
    }

    boolean this_present_maxBatchSize = true && this.isSetMaxBatchSize();
    boolean that_present_maxBatchSize = true && that.isSetMaxBatchSize();
    if (this_present_maxBatchSize || that_present_maxBatchSize) {
      if (!(this_present_maxBatchSize && that_present_maxBatchSize))
        return false;
      if (this.maxBatchSize != that.maxBatchSize)
        return false;
    }

    boolean this_present_maxLingerTime = true && this.isSetMaxLingerTime();
    boolean that_present_maxLingerTime = true && that.isSetMaxLingerTime();
    if (this_present_maxLingerTime || that_present_maxLingerTime) {
      if (!(this_present_maxLingerTime && that_present_maxLingerTime))
        return false;
      if (this.maxLingerTime != that.maxLingerTime)
        return false;
    }

    boolean this_present_version = true && this.isSetVersion();
    boolean that_present_version = true && that.isSetVersion();
    if (this_present_version || that_present_version) {
      if (!(this_present_version && that_present_version))
        return false;
      if (!this.version.equals(that.version))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_consumerId = true && (isSetConsumerId());
    list.add(present_consumerId);
    if (present_consumerId)
      list.add(consumerId);

    boolean present_groupId = true && (isSetGroupId());
    list.add(present_groupId);
    if (present_groupId)
      list.add(groupId);

    boolean present_cluster = true && (isSetCluster());
    list.add(present_cluster);
    if (present_cluster)
      list.add(cluster);

    boolean present_fetchOffset = true && (isSetFetchOffset());
    list.add(present_fetchOffset);
    if (present_fetchOffset)
      list.add(fetchOffset);

    boolean present_maxBatchSize = true && (isSetMaxBatchSize());
    list.add(present_maxBatchSize);
    if (present_maxBatchSize)
      list.add(maxBatchSize);

    boolean present_maxLingerTime = true && (isSetMaxLingerTime());
    list.add(present_maxLingerTime);
    if (present_maxLingerTime)
      list.add(maxLingerTime);

    boolean present_version = true && (isSetVersion());
    list.add(present_version);
    if (present_version)
      list.add(version);

    return list.hashCode();
  }

  @Override
  public int compareTo(FetchRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetConsumerId()).compareTo(other.isSetConsumerId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConsumerId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.consumerId, other.consumerId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGroupId()).compareTo(other.isSetGroupId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGroupId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.groupId, other.groupId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCluster()).compareTo(other.isSetCluster());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCluster()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cluster, other.cluster);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFetchOffset()).compareTo(other.isSetFetchOffset());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFetchOffset()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fetchOffset, other.fetchOffset);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMaxBatchSize()).compareTo(other.isSetMaxBatchSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxBatchSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxBatchSize, other.maxBatchSize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMaxLingerTime()).compareTo(other.isSetMaxLingerTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxLingerTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxLingerTime, other.maxLingerTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVersion()).compareTo(other.isSetVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version, other.version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("FetchRequest(");
    boolean first = true;

    sb.append("consumerId:");
    if (this.consumerId == null) {
      sb.append("null");
    } else {
      sb.append(this.consumerId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("groupId:");
    if (this.groupId == null) {
      sb.append("null");
    } else {
      sb.append(this.groupId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cluster:");
    if (this.cluster == null) {
      sb.append("null");
    } else {
      sb.append(this.cluster);
    }
    first = false;
    if (isSetFetchOffset()) {
      if (!first) sb.append(", ");
      sb.append("fetchOffset:");
      if (this.fetchOffset == null) {
        sb.append("null");
      } else {
        sb.append(this.fetchOffset);
      }
      first = false;
    }
    if (isSetMaxBatchSize()) {
      if (!first) sb.append(", ");
      sb.append("maxBatchSize:");
      sb.append(this.maxBatchSize);
      first = false;
    }
    if (isSetMaxLingerTime()) {
      if (!first) sb.append(", ");
      sb.append("maxLingerTime:");
      sb.append(this.maxLingerTime);
      first = false;
    }
    if (isSetVersion()) {
      if (!first) sb.append(", ");
      sb.append("version:");
      if (this.version == null) {
        sb.append("null");
      } else {
        sb.append(this.version);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (consumerId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'consumerId' was not present! Struct: " + toString());
    }
    if (groupId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'groupId' was not present! Struct: " + toString());
    }
    if (cluster == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'cluster' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class FetchRequestStandardSchemeFactory implements SchemeFactory {
    public FetchRequestStandardScheme getScheme() {
      return new FetchRequestStandardScheme();
    }
  }

  private static class FetchRequestStandardScheme extends StandardScheme<FetchRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, FetchRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CONSUMER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.consumerId = iprot.readString();
              struct.setConsumerIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // GROUP_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.groupId = iprot.readString();
              struct.setGroupIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CLUSTER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cluster = iprot.readString();
              struct.setClusterIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // FETCH_OFFSET
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map34 = iprot.readMapBegin();
                struct.fetchOffset = new HashMap<String,Map<String,Long>>(2*_map34.size);
                String _key35;
                Map<String,Long> _val36;
                for (int _i37 = 0; _i37 < _map34.size; ++_i37)
                {
                  _key35 = iprot.readString();
                  {
                    org.apache.thrift.protocol.TMap _map38 = iprot.readMapBegin();
                    _val36 = new HashMap<String,Long>(2*_map38.size);
                    String _key39;
                    long _val40;
                    for (int _i41 = 0; _i41 < _map38.size; ++_i41)
                    {
                      _key39 = iprot.readString();
                      _val40 = iprot.readI64();
                      _val36.put(_key39, _val40);
                    }
                    iprot.readMapEnd();
                  }
                  struct.fetchOffset.put(_key35, _val36);
                }
                iprot.readMapEnd();
              }
              struct.setFetchOffsetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // MAX_BATCH_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.maxBatchSize = iprot.readI32();
              struct.setMaxBatchSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // MAX_LINGER_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.maxLingerTime = iprot.readI32();
              struct.setMaxLingerTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 60: // VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.version = iprot.readString();
              struct.setVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, FetchRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.consumerId != null) {
        oprot.writeFieldBegin(CONSUMER_ID_FIELD_DESC);
        oprot.writeString(struct.consumerId);
        oprot.writeFieldEnd();
      }
      if (struct.groupId != null) {
        oprot.writeFieldBegin(GROUP_ID_FIELD_DESC);
        oprot.writeString(struct.groupId);
        oprot.writeFieldEnd();
      }
      if (struct.cluster != null) {
        oprot.writeFieldBegin(CLUSTER_FIELD_DESC);
        oprot.writeString(struct.cluster);
        oprot.writeFieldEnd();
      }
      if (struct.fetchOffset != null) {
        if (struct.isSetFetchOffset()) {
          oprot.writeFieldBegin(FETCH_OFFSET_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.MAP, struct.fetchOffset.size()));
            for (Map.Entry<String, Map<String,Long>> _iter42 : struct.fetchOffset.entrySet())
            {
              oprot.writeString(_iter42.getKey());
              {
                oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I64, _iter42.getValue().size()));
                for (Map.Entry<String, Long> _iter43 : _iter42.getValue().entrySet())
                {
                  oprot.writeString(_iter43.getKey());
                  oprot.writeI64(_iter43.getValue());
                }
                oprot.writeMapEnd();
              }
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetMaxBatchSize()) {
        oprot.writeFieldBegin(MAX_BATCH_SIZE_FIELD_DESC);
        oprot.writeI32(struct.maxBatchSize);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMaxLingerTime()) {
        oprot.writeFieldBegin(MAX_LINGER_TIME_FIELD_DESC);
        oprot.writeI32(struct.maxLingerTime);
        oprot.writeFieldEnd();
      }
      if (struct.version != null) {
        if (struct.isSetVersion()) {
          oprot.writeFieldBegin(VERSION_FIELD_DESC);
          oprot.writeString(struct.version);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class FetchRequestTupleSchemeFactory implements SchemeFactory {
    public FetchRequestTupleScheme getScheme() {
      return new FetchRequestTupleScheme();
    }
  }

  private static class FetchRequestTupleScheme extends TupleScheme<FetchRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, FetchRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.consumerId);
      oprot.writeString(struct.groupId);
      oprot.writeString(struct.cluster);
      BitSet optionals = new BitSet();
      if (struct.isSetFetchOffset()) {
        optionals.set(0);
      }
      if (struct.isSetMaxBatchSize()) {
        optionals.set(1);
      }
      if (struct.isSetMaxLingerTime()) {
        optionals.set(2);
      }
      if (struct.isSetVersion()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetFetchOffset()) {
        {
          oprot.writeI32(struct.fetchOffset.size());
          for (Map.Entry<String, Map<String,Long>> _iter44 : struct.fetchOffset.entrySet())
          {
            oprot.writeString(_iter44.getKey());
            {
              oprot.writeI32(_iter44.getValue().size());
              for (Map.Entry<String, Long> _iter45 : _iter44.getValue().entrySet())
              {
                oprot.writeString(_iter45.getKey());
                oprot.writeI64(_iter45.getValue());
              }
            }
          }
        }
      }
      if (struct.isSetMaxBatchSize()) {
        oprot.writeI32(struct.maxBatchSize);
      }
      if (struct.isSetMaxLingerTime()) {
        oprot.writeI32(struct.maxLingerTime);
      }
      if (struct.isSetVersion()) {
        oprot.writeString(struct.version);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, FetchRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.consumerId = iprot.readString();
      struct.setConsumerIdIsSet(true);
      struct.groupId = iprot.readString();
      struct.setGroupIdIsSet(true);
      struct.cluster = iprot.readString();
      struct.setClusterIsSet(true);
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TMap _map46 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.MAP, iprot.readI32());
          struct.fetchOffset = new HashMap<String,Map<String,Long>>(2*_map46.size);
          String _key47;
          Map<String,Long> _val48;
          for (int _i49 = 0; _i49 < _map46.size; ++_i49)
          {
            _key47 = iprot.readString();
            {
              org.apache.thrift.protocol.TMap _map50 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I64, iprot.readI32());
              _val48 = new HashMap<String,Long>(2*_map50.size);
              String _key51;
              long _val52;
              for (int _i53 = 0; _i53 < _map50.size; ++_i53)
              {
                _key51 = iprot.readString();
                _val52 = iprot.readI64();
                _val48.put(_key51, _val52);
              }
            }
            struct.fetchOffset.put(_key47, _val48);
          }
        }
        struct.setFetchOffsetIsSet(true);
      }
      if (incoming.get(1)) {
        struct.maxBatchSize = iprot.readI32();
        struct.setMaxBatchSizeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.maxLingerTime = iprot.readI32();
        struct.setMaxLingerTimeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.version = iprot.readString();
        struct.setVersionIsSet(true);
      }
    }
  }

}

